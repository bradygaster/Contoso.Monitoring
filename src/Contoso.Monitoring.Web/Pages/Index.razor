@page "/"
@inject IConfiguration _configuration;
@inject SiloService _siloService;
@inject NavigationManager _navigationManager;
@implements IAsyncDisposable
@inject IJSRuntime JS

<h1>Monitored Areas</h1>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Area Name</th>
            <th>Temperature (Fahrenheit)</th>
            <th>Temperature (Celsius)</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (_areas != null)
        {
            @foreach (var area in _areas)
            {
                <tr>
                    <td>@area.Name</td>
                    <td>@area.Temperature.Fahrenheit.ToString("#.##")</td>
                    <td>@area.Temperature.Celsius.ToString("#.##")</td>
                    <td>
                        <div style="width: 600px; height: 400px;">
                            <canvas id="chart-@area.Name"></canvas>
                        </div>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code
{
    private List<MonitoredArea> _areas = new List<MonitoredArea>();
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _areas = await _siloService.GetMonitoredAreas();

        _hubConnection = new HubConnectionBuilder().WithUrl(_navigationManager.ToAbsoluteUri("/hubs/monitor")).Build();

        _hubConnection.On<TemperatureReading>("ReceiveUpdate", async (reading) =>
        {
            var existing = _areas.First(_ => _.Name == reading.SensorName);
            _areas.Remove(existing);
            existing.Temperature = reading;
            _areas.Add(existing);
            _areas = _areas.OrderBy(_ => _.Name).ToList();

            await JS.InvokeVoidAsync("addChartValue", reading.SensorName, reading.Celsius.ToString("#.###"), reading.Fahrenheit.ToString("#.###"));

            base.StateHasChanged();
        });

        await _hubConnection.StartAsync();

        base.StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await _hubConnection.DisposeAsync();
    }
}